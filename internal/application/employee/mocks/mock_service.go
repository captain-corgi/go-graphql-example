// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	employee "github.com/captain-corgi/go-graphql-example/internal/application/employee"
	gomock "github.com/golang/mock/gomock"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// CreateEmployee mocks base method.
func (m *MockService) CreateEmployee(ctx context.Context, req employee.CreateEmployeeRequest) (*employee.CreateEmployeeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEmployee", ctx, req)
	ret0, _ := ret[0].(*employee.CreateEmployeeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEmployee indicates an expected call of CreateEmployee.
func (mr *MockServiceMockRecorder) CreateEmployee(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEmployee", reflect.TypeOf((*MockService)(nil).CreateEmployee), ctx, req)
}

// DeleteEmployee mocks base method.
func (m *MockService) DeleteEmployee(ctx context.Context, req employee.DeleteEmployeeRequest) (*employee.DeleteEmployeeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEmployee", ctx, req)
	ret0, _ := ret[0].(*employee.DeleteEmployeeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteEmployee indicates an expected call of DeleteEmployee.
func (mr *MockServiceMockRecorder) DeleteEmployee(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEmployee", reflect.TypeOf((*MockService)(nil).DeleteEmployee), ctx, req)
}

// GetEmployee mocks base method.
func (m *MockService) GetEmployee(ctx context.Context, req employee.GetEmployeeRequest) (*employee.GetEmployeeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEmployee", ctx, req)
	ret0, _ := ret[0].(*employee.GetEmployeeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEmployee indicates an expected call of GetEmployee.
func (mr *MockServiceMockRecorder) GetEmployee(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEmployee", reflect.TypeOf((*MockService)(nil).GetEmployee), ctx, req)
}

// ListEmployees mocks base method.
func (m *MockService) ListEmployees(ctx context.Context, req employee.ListEmployeesRequest) (*employee.ListEmployeesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEmployees", ctx, req)
	ret0, _ := ret[0].(*employee.ListEmployeesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEmployees indicates an expected call of ListEmployees.
func (mr *MockServiceMockRecorder) ListEmployees(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEmployees", reflect.TypeOf((*MockService)(nil).ListEmployees), ctx, req)
}

// ListEmployeesByDepartment mocks base method.
func (m *MockService) ListEmployeesByDepartment(ctx context.Context, req employee.ListEmployeesByDepartmentRequest) (*employee.ListEmployeesByDepartmentResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEmployeesByDepartment", ctx, req)
	ret0, _ := ret[0].(*employee.ListEmployeesByDepartmentResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEmployeesByDepartment indicates an expected call of ListEmployeesByDepartment.
func (mr *MockServiceMockRecorder) ListEmployeesByDepartment(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEmployeesByDepartment", reflect.TypeOf((*MockService)(nil).ListEmployeesByDepartment), ctx, req)
}

// ListEmployeesByStatus mocks base method.
func (m *MockService) ListEmployeesByStatus(ctx context.Context, req employee.ListEmployeesByStatusRequest) (*employee.ListEmployeesByStatusResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEmployeesByStatus", ctx, req)
	ret0, _ := ret[0].(*employee.ListEmployeesByStatusResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEmployeesByStatus indicates an expected call of ListEmployeesByStatus.
func (mr *MockServiceMockRecorder) ListEmployeesByStatus(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEmployeesByStatus", reflect.TypeOf((*MockService)(nil).ListEmployeesByStatus), ctx, req)
}

// UpdateEmployee mocks base method.
func (m *MockService) UpdateEmployee(ctx context.Context, req employee.UpdateEmployeeRequest) (*employee.UpdateEmployeeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEmployee", ctx, req)
	ret0, _ := ret[0].(*employee.UpdateEmployeeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateEmployee indicates an expected call of UpdateEmployee.
func (mr *MockServiceMockRecorder) UpdateEmployee(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEmployee", reflect.TypeOf((*MockService)(nil).UpdateEmployee), ctx, req)
}
