// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	user "github.com/captain-corgi/go-graphql-example/internal/domain/user"
	gomock "github.com/golang/mock/gomock"
)

// MockDomainService is a mock of DomainService interface.
type MockDomainService struct {
	ctrl     *gomock.Controller
	recorder *MockDomainServiceMockRecorder
}

// MockDomainServiceMockRecorder is the mock recorder for MockDomainService.
type MockDomainServiceMockRecorder struct {
	mock *MockDomainService
}

// NewMockDomainService creates a new mock instance.
func NewMockDomainService(ctrl *gomock.Controller) *MockDomainService {
	mock := &MockDomainService{ctrl: ctrl}
	mock.recorder = &MockDomainServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDomainService) EXPECT() *MockDomainServiceMockRecorder {
	return m.recorder
}

// CanDeleteUser mocks base method.
func (m *MockDomainService) CanDeleteUser(ctx context.Context, userID user.UserID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CanDeleteUser", ctx, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// CanDeleteUser indicates an expected call of CanDeleteUser.
func (mr *MockDomainServiceMockRecorder) CanDeleteUser(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CanDeleteUser", reflect.TypeOf((*MockDomainService)(nil).CanDeleteUser), ctx, userID)
}

// ValidateUniqueEmail mocks base method.
func (m *MockDomainService) ValidateUniqueEmail(ctx context.Context, email user.Email, excludeUserID *user.UserID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateUniqueEmail", ctx, email, excludeUserID)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateUniqueEmail indicates an expected call of ValidateUniqueEmail.
func (mr *MockDomainServiceMockRecorder) ValidateUniqueEmail(ctx, email, excludeUserID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateUniqueEmail", reflect.TypeOf((*MockDomainService)(nil).ValidateUniqueEmail), ctx, email, excludeUserID)
}
